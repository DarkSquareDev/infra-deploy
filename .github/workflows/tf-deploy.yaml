name: "Terraform AWS"

on:
  pull_request:
    branches:
      - main
  push:
    paths:
      - 'feat/**'
      - 'fix/**'
      - 'wip/**'

# keep one apply at a time per ref
concurrency:
  group: terraform-${{ github.ref }}
  cancel-in-progress: false

jobs:
  plan:
    name: IAC - PLAN
    runs-on: ubuntu-latest
    permissions:
      id-token: write         # OIDC for AWS
      contents: read
      pull-requests: write    # we post PR comments
    env:
      TF_IN_AUTOMATION: "true"
    outputs:
      plan_outcome: ${{ steps.plan.outcome }}
    steps:
      - name: Git Clone the Repo
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.6.1"
          terraform_wrapper: true
      - name Print GitHub OIDC claims
  run: |
    echo "REPO: $GITHUB_REPOSITORY"


      - name: Configure AWS Creds
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::280504581481:role/github-role
          aws-region: us-east-1

      - name: Terraform init
        id: init
        run: terraform init -input=false

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color -input=false -out=tfplan
        continue-on-error: true

      - name: Upload Terraform Plan Artifact
        if: github.event_name == 'pull_request' && steps.plan.outcome == 'success'
        uses: actions/upload-artifact@v4
        with:
          name: tfplan
          path: tfplan
          retention-days: 1

      - name: Comment plan status on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const planOk = "${{ steps.plan.outcome }}" === "success";
            const msg = [
              "#### Terraform Initialization: `${{ steps.init.outcome }}`",
              "#### Terraform Validation: `${{ steps.validate.outcome }}`",
              `#### Terraform Plan Status: ${planOk ? "Plan succeeded" : "Plan failed"}`,
              "",
              planOk
                ? "Terraform plan uploaded as an artifact.\n[Open the run to download it](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})\n\n### Approve the **IAC - APPLY** job in the Environments tab to proceed."
                : "Fix the errors and re-run.",
              "",
              `*Pusher: @${{ github.actor }}, Event: ${{ github.event_name }}, Workflow: ${{ github.workflow }}*`
            ].join("\n");
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: msg
            });

  apply:
    name: IAC - APPLY
    needs: plan
    if: github.event_name == 'pull_request' && needs.plan.outputs.plan_outcome == 'success'
    runs-on: ubuntu-latest
    # gate with environment for manual approval in UI
    environment:
      name: terraform-prod
    permissions:
      id-token: write
      contents: read
      pull-requests: write
    env:
      TF_IN_AUTOMATION: "true"
    steps:
      - name: Git Clone the Repo
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.6.1"
          terraform_wrapper: true
         
  run: |
    echo "REPO: $GITHUB_REPOSITORY"


      - name: Configure AWS Creds
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::280504581481:role/github-role
          aws-region: us-east-1

      - name: Terraform init
        id: init
        run: terraform init -input=false

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Download plan artifact
        uses: actions/download-artifact@v4
        with:
          name: tfplan
          path: .

      - name: Terraform Apply
        id: apply
        run: terraform apply -auto-approve -input=false tfplan
        continue-on-error: true

      - name: Comment apply results on PR
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const outcome = "${{ steps.apply.outcome }}";
            const body = [
              `#### Terraform Apply \`${outcome}\``,
              "",
              `*Applied by: @${{ github.actor }}*`
            ].join("\n");
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body
            });
